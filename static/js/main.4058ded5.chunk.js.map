{"version":3,"sources":["logo.svg","components/form.js","components/navbar.js","components/Header.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","state","feedback","name","email","handleChange","bind","handleSubmit","e","this","setState","target","value","event","sendFeedback","message_html","to_email","from_name","reply_to","templateId","variables","window","emailjs","send","then","res","console","log","catch","err","error","className","center","md","outline","type","hint","onChange","color","onClick","React","Component","FullPageIntroWithFixedTransparentNavbar","collapse","isWideEnough","fixed","dark","expand","scrolling","transparent","href","src","isOpen","navbar","right","active","to","overlay","style","fontSize","fontFamily","width","fontWeight","wordWrap","marginTop","display","justifyContent","borderRadius","id","Header","content","title","body","image","main","map","c","height","waves","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4058ded5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { MDBInput, MDBBtn, MDBCol, MDBRow } from \"mdbreact\";\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { feedback: \"\", name: \"Shubham Giri\", email: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ email: e.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    const templateId = \"template_hO3IhqwA\";\r\n\r\n    this.sendFeedback(templateId, {\r\n        message_html: this.state.feedback,\r\n        to_email:this.state.email,\r\n      from_name: this.state.name,\r\n      reply_to: this.state.email,\r\n    });\r\n  }\r\n\r\n  sendFeedback(templateId, variables) {\r\n    window.emailjs\r\n      .send(\"gmail\", templateId, variables)\r\n      .then((res) => {\r\n        console.log(\"Email successfully sent!\");\r\n      })\r\n      // Handle errors here however you like, or use a React error boundary\r\n      .catch((err) =>\r\n        console.error(\r\n          \"Oh well, you failed. Here some thoughts on the error that occured:\",\r\n          err\r\n        )\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"test-mailing\">\r\n        <h1>Let's see if it works</h1>\r\n        <MDBRow center>\r\n          <MDBCol md={4}>\r\n            <MDBInput\r\n              outline\r\n              value={this.state.email}\r\n              type=\"email\"\r\n              hint=\"Example@company.com\"\r\n              onChange={(e) => {\r\n                this.handleChange(e);\r\n              }}\r\n            />\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <MDBBtn\r\n          type=\"button\"\r\n          color=\"success\"\r\n          value=\"Submit\"\r\n          className=\"btn btn--submit\"\r\n          onClick={this.handleSubmit}\r\n        >\r\n          {\" \"}\r\n          Send Invitation{\" \"}\r\n        </MDBBtn>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport Form from \"./form\";\r\nimport \"./stuff.css\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBContainer,\r\n  MDBMask,\r\n  MDBView,\r\n  MDBBtn,\r\n  MDBCol,\r\n  MDBRow,\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./stuff.css\";\r\nclass FullPageIntroWithFixedTransparentNavbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapse: false,\r\n      isWideEnough: false,\r\n    };\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({\r\n      collapse: !this.state.collapse,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <Router>\r\n            <MDBNavbar\r\n              color=\"white\"\r\n              fixed=\"top\"\r\n              dark\r\n              expand=\"md\"\r\n              scrolling\r\n              transparent\r\n            >\r\n              <MDBNavbarBrand href=\"/\">\r\n                <strong>\r\n                  <img src=\"./../logo.png\" />\r\n                </strong>\r\n              </MDBNavbarBrand>\r\n              {!this.state.isWideEnough && (\r\n                <MDBNavbarToggler onClick={this.onClick} />\r\n              )}\r\n              <MDBCollapse isOpen={this.state.collapse} navbar>\r\n                <MDBNavbarNav right>\r\n                  <MDBNavItem active>\r\n                    <MDBNavLink to=\"#\">Home</MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to=\"#\">Link</MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to=\"#\">\r\n                      <Link to=\"/invite\">INVITE</Link>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBNavbar>\r\n          </Router>\r\n\r\n          <MDBView src=\"https://assets.huddleai.com/img/chat-on-swings.48b2d505.jpg\">\r\n            <MDBMask\r\n              overlay=\"black-strong\"\r\n              className=\"flex-center flex-column text-white text-center\"\r\n            >\r\n              <h1\r\n                style={{\r\n                  fontSize: \"64px\",\r\n                  fontFamily: \"'Dosis', sans-serif\",\r\n                  width: \"65%\",\r\n                  fontWeight: \"700\",\r\n                  wordWrap: \"break-word\",\r\n                  marginTop: \"100px\",\r\n                }}\r\n              >\r\n                Boost your Customer Service with an Intelligent Assistant\r\n              </h1>\r\n\r\n              <h3\r\n                style={{ width: \"65%\", fontWeight: \"200\", marginTop: \"30px\" }}\r\n              >\r\n                Build an intuitive Intelligent Chatbot powered by a knowledge\r\n                graph to answer or action your customers queries.\r\n              </h3>\r\n              <MDBCol style={{ marginTop: \"80px\" }}>\r\n                <MDBRow>\r\n                  <MDBCol\r\n                    style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                  >\r\n                    {\" \"}\r\n                    <a href=\"/invite\">\r\n                      <MDBBtn style={{ borderRadius: \"25px\" }} color=\"success\">\r\n                        INVITE\r\n                      </MDBBtn>\r\n                    </a>\r\n                  </MDBCol>\r\n                  <MDBCol\r\n                    style={{ display: \"flex\", justifyContent: \"flex-start\" }}\r\n                  >\r\n                    {\" \"}\r\n                    <MDBBtn\r\n                      id=\"featuredbtn\"\r\n                      style={{ borderRadius: \"25px\" }}\r\n                      outline\r\n                      color=\"grey\"\r\n                    >\r\n                      FEATURES\r\n                    </MDBBtn>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n              </MDBCol>\r\n            </MDBMask>\r\n          </MDBView>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FullPageIntroWithFixedTransparentNavbar;\r\n","import React from 'react'\r\nimport Navbar from './navbar'\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBCardBody,\r\n  MDBCardText,\r\n  MDBNavItem,\r\n  MDBCardImage,\r\n  MDBContainer,\r\n  MDBCard,\r\n  MDBCardTitle,\r\n  MDBBtn,\r\n  MDBCol,\r\n  MDBRow,\r\n} from \"mdbreact\";\r\n\r\nconst content = [\r\n  {\r\n    title: \"customerService\",\r\n    body:\r\n      \"Go beyond the standard customer service chatbot and give your customers deeper experience by integrating with your internal applications\",\r\n    image: \"./../research.svg\",\r\n  },\r\n  {\r\n    title: \"customerService\",\r\n    body:\r\n      \"Go beyond the standard customer service chatbot and give your customers deeper experience by integrating with your internal applications\",\r\n    image: \"./../research.svg\",\r\n  },\r\n  {\r\n    title: \"customerService\",\r\n    body:\r\n      \"Go beyond the standard customer service chatbot and give your customers deeper experience by integrating with your internal applications\",\r\n    image: \"./../research.svg\",\r\n  },\r\n  {\r\n    title: \"customerService\",\r\n    body:\r\n      \"Go beyond the standard customer service chatbot and give your customers deeper experience by integrating with your internal applications\",\r\n    image: \"./../research.svg\",\r\n  },\r\n];\r\nfunction main() {\r\n  return (\r\n    <div>\r\n      <main>\r\n        <MDBContainer className=\"text-center my-5\">\r\n          <MDBRow>\r\n            {content.map((c) => (\r\n              <MDBCol md={3}>\r\n                <MDBCard>\r\n                  <MDBCardImage\r\n                    style={{height:\"150px\",width:\"150px\"}}\r\n                    className=\"img-fluid\"\r\n                    src=\"./../research.png\"\r\n                    waves\r\n                  />\r\n                  <MDBCardBody>\r\n                            <MDBCardTitle>{c.title}</MDBCardTitle>\r\n                    <MDBCardText>\r\n                 {c.body}\r\n                    </MDBCardText>\r\n                    <MDBBtn href=\"#\">Read more...</MDBBtn>\r\n                  </MDBCardBody>\r\n                </MDBCard>\r\n              </MDBCol>\r\n            ))}\r\n          </MDBRow>\r\n        </MDBContainer>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default main;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/main\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Form from \"./components/form\"\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    \n         \n            <>\n              <Header />\n              <Main />\n            </>\n          \n\n            <Form />\n         \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}